pipeline {
    agent any

    environment {
        PYTHON_IMG_NAME = "python-app:${BUILD_NUMBER}"
        NGINX_IMG_NAME = "nginx-static:${BUILD_NUMBER}"
        SNYK_TOKEN = credentials('snyk-token') // Ensure you have a Jenkins credential with ID 'snyk-token'
        DOCKER_BUILDKIT = 1 // Enable BuildKit
    }

    stages {
        stage('Build Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                    script {
                        // Build and push Python app image
                        sh '''
                            echo "$USERPASS" | docker login -u "$USERNAME" --password-stdin
                            docker build -t "$PYTHON_IMG_NAME" -f Dockerfile.python .
                            docker tag "$PYTHON_IMG_NAME" exaclly/"$PYTHON_IMG_NAME"
                            docker push exaclly/"$PYTHON_IMG_NAME"
                        '''
                        // Build and push Nginx image
                        sh '''
                            echo "$USERPASS" | docker login -u "$USERNAME" --password-stdin
                            docker build -t "$NGINX_IMG_NAME" -f Dockerfile.nginx .
                            docker tag "$NGINX_IMG_NAME" exaclly/"$NGINX_IMG_NAME"
                            docker push exaclly/"$NGINX_IMG_NAME"
                        '''
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip3 install pytest unittest2 pylint'
            }
        }

        stage('Parallel Linting and Unittest') {
            parallel {
                stage('Static Code Linting') {
                    steps {
                        sh 'python3 -m pylint -f parseable --reports=no *.py > pylint.log'
                    }
                    post {
                        always {
                            sh 'cat pylint.log'
                            recordIssues (
                                enabledForFailure: true,
                                aggregatingResults: true,
                                tools: [pyLint(name: 'Pylint', pattern: '**/pylint.log')]
                            )
                        }
                    }
                }
                stage('Unittest') {
                    steps {
                        script {
                            // Run unit tests
                            sh 'python3 -m pytest --junitxml results.xml tests/test_demo.py'
                        }
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'results.xml'
                        }
                    }
                }
            }
        }

        stage('Snyk Scan Python Image') {
            steps {
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    withEnv(["SNYK
