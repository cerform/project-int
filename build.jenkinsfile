pipeline {
    agent any

    environment {
        PYTHON_IMG_NAME = "python-app:${BUILD_NUMBER}"
        NGINX_IMG_NAME = "nginx-static:${BUILD_NUMBER}"
        SNYK_TOKEN = credentials('snyk-token')
    }

    stages {
        stage('Check Environment') {
            steps {
                script {
                    // Check Docker daemon
                    try {
                        sh 'docker info > /dev/null 2>&1'
                    } catch (Exception e) {
                        echo "Docker daemon is not running or not accessible: ${e.message}"
                        error "Stopping pipeline due to Docker daemon issue"
                    }

                    // Check for necessary credentials
                    try {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                            echo "DockerHub credentials are correctly set."
                        }
                    } catch (Exception e) {
                        echo "DockerHub credentials are not set correctly: ${e.message}"
                        error "Stopping pipeline due to missing DockerHub credentials"
                    }

                    // Check for necessary files
                    def files = ['Dockerfile.python', 'Dockerfile.nginx', 'docker-compose.yml', 'requirements.txt']
                    for (file in files) {
                        if (!fileExists(file)) {
                            echo "${file} does not exist in the workspace."
                            error "Stopping pipeline due to missing ${file}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Docker login
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                        try {
                            sh """
                                echo \$USERPASS | docker login -u \$USERNAME --password-stdin
                            """
                        } catch (Exception e) {
                            echo "Docker login failed: ${e.message}"
                            error "Stopping pipeline due to Docker login failure"
                        }
                    }

                    // Build and push Python app image
                    try {
                        sh """
                            docker build -t "${env.PYTHON_IMG_NAME}" -f Dockerfile.python .
                            docker tag "${env.PYTHON_IMG_NAME}" etcsys/"${env.PYTHON_IMG_NAME}"
                            docker push etcsys/"${env.PYTHON_IMG_NAME}"
                        """
                    } catch (Exception e) {
                        echo "Failed to build/push Python image: ${e.message}"
                        error "Stopping pipeline due to Docker build/push failure"
                    }

                    // Build and push Nginx image
                    try {
                        sh """
                            docker build -t "${env.NGINX_IMG_NAME}" -f Dockerfile.nginx .
                            docker tag "${env.NGINX_IMG_NAME}" etcsys/"${env.NGINX_IMG_NAME}"
                            docker push etcsys/"${env.NGINX_IMG_NAME}"
                        """
                    } catch (Exception e) {
                        echo "Failed to build/push Nginx image: ${e.message}"
                        error "Stopping pipeline due to Docker build/push failure"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        // Install dependencies
                        sh """
                            docker run --rm -v ${WORKSPACE}:/app -w /app etcsys/${env.PYTHON_IMG_NAME} pip install -r requirements.txt
                        """
                    } catch (Exception e) {
                        echo "Failed to install dependencies: ${e.message}"
                        error "Stopping pipeline due to dependency installation failure"
                    }
                }
            }
        }

        stage('Linting') {
            steps {
                script {
                    try {
                        // Check if flake8 is installed in the Docker image
                        sh """
                            docker run --rm etcsys/${env.PYTHON_IMG_NAME} flake8 --version || (echo "flake8 is not installed in the Docker image." && exit 1)
                        """
                    } catch (Exception e) {
                        echo "flake8 is not installed: ${e.message}"
                        error "Stopping pipeline due to missing flake8"
                    }

                    try {
                        // Run linting with flake8 and .flake8 configuration
                        sh """
                            docker run --rm -v ${WORKSPACE}:/app -w /app -v ${WORKSPACE}/.flake8:/app/.flake8 etcsys/${env.PYTHON_IMG_NAME} flake8 .
                        """
                    } catch (Exception e) {
                        echo "Linting failed: ${e.message}"
                        error "Stopping pipeline due to linting failure"
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    try {
                        // Check if pytest is installed in the Docker image
                        sh """
                            docker run --rm etcsys/${env.PYTHON_IMG_NAME} pytest --version || (echo "pytest is not installed in the Docker image." && exit 1)
                        """
                    } catch (Exception e) {
                        echo "pytest is not installed: ${e.message}"
                        error "Stopping pipeline due to missing pytest"
                    }

                    try {
                        // Run unit tests with PYTHONPATH set to include the /app directory
                        sh """
                            docker run --rm -v ${WORKSPACE}:/app -w /app -e PYTHONPATH=/app etcsys/${env.PYTHON_IMG_NAME} pytest tests
                        """
                    } catch (Exception e) {
                        echo "Unit tests failed: ${e.message}"
                        error "Stopping pipeline due to unit test failure"
                    }
                }
            }
        }

        stage('Snyk Security Scans') {
            steps {
                script {
                    try {
                        // Check if Snyk token is accessible
                        if (!env.SNYK_TOKEN) {
                            echo "Snyk token is not accessible."
                            error "Stopping pipeline due to missing Snyk token"
                        }

                        // Run Snyk scans
                        sh """
                            docker run --rm -v ${WORKSPACE}:/app -w /app snyk/snyk:docker test --file=Dockerfile.python --docker etcsys/${env.PYTHON_IMG_NAME} --org=my-org --project-name=${env.PYTHON_IMG_NAME} --json-file-output=snyk_report.json --sarif-file-output=snyk_report.sarif --fail-on=all
                        """
                    } catch (Exception e) {
                        echo "Snyk scan failed: ${e.message}"
                        error "Stopping pipeline due to Snyk scan failure"
                    }
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                script {
                    // Check if docker-compose.yml exists
                    if (!fileExists('docker-compose.yml')) {
                        echo "docker-compose.yml does not exist in the workspace."
                        error "Stopping pipeline due to missing docker-compose.yml"
                    }

                    try {
                        // Deploy containers using Docker Compose
                        sh """
                            docker-compose up -d
                        """
                    } catch (Exception e) {
                        echo "Deployment failed: ${e.message}"
                        error "Stopping pipeline due to deployment failure"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Cleanup steps go here
                echo 'Starting cleanup process...'

                // Remove Python app image
                try {
                    sh "docker rmi etcsys/${env.PYTHON_IMG_NAME} || echo 'Image etcsys/${env.PYTHON_IMG_NAME} already removed or not found.'"
                } catch (Exception e) {
                    echo "Cleanup of Python image failed: ${e.message}"
                }

                // Remove Nginx image
                try {
                    sh "docker rmi etcsys/${env.NGINX_IMG_NAME} || echo 'Image etcsys/${env.NGINX_IMG_NAME} already removed or not found.'"
                } catch (Exception e) {
                    echo "Cleanup of Nginx image failed: ${e.message}"
                }

                // Clean the workspace
                try {
                    cleanWs()
                } catch (Exception e) {
                    echo "Workspace cleanup failed: ${e.message}"
                }

                echo 'Cleanup process completed.'
            }
        }
    }
}
