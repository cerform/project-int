pipeline {
    agent any

    environment {
        PYTHON_IMG_NAME = "python-app:${BUILD_NUMBER}"
        NGINX_IMG_NAME = "nginx-static:${BUILD_NUMBER}"
        SNYK_TOKEN = credentials('snyk-token') // Ensure you have a Jenkins credential with ID 'snyk-token'
        DOCKERHUB_CRED = credentials('dockerhub')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    dockerLogin()
                    buildAndPushDockerImage("Dockerfile.python", PYTHON_IMG_NAME)
                    buildAndPushDockerImage("Dockerfile.nginx", NGINX_IMG_NAME)
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip3 install pytest unittest2 pylint'
            }
        }

        stage('Parallel Linting and Unittest') {
            parallel {
                stage('Static Code Linting') {
                    steps {
                        sh 'python3 -m pylint -f parseable --reports=no *.py > pylint.log'
                    }
                    post {
                        always {
                            sh 'cat pylint.log'
                            recordIssues (
                                enabledForFailure: true,
                                aggregatingResults: true,
                                tools: [pyLint(name: 'Pylint', pattern: '**/pylint.log')]
                            )
                        }
                    }
                }
                stage('Unittest') {
                    steps {
                        script {
                            // Run unit tests
                            sh 'python3 -m pytest --junitxml results.xml tests/test_demo.py'
                        }
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'results.xml'
                        }
                    }
                }
            }
        }

        stage('Snyk Scan Python Image') {
            steps {
                snykScan(PYTHON_IMG_NAME, "Dockerfile.python")
            }
        }

        stage('Snyk Scan Nginx Image') {
            steps {
                snykScan(NGINX_IMG_NAME, "Dockerfile.nginx")
            }
        }

        stage('Deploy Containers') {
            steps {
                script {
                    deployContainers()
                }
            }
        }
    }

    post {
        always {
            script {
                cleanup()
            }
        }
    }
}

// Function to handle Docker login
def dockerLogin() {
    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CRED, usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
        sh "echo \"$USERPASS\" | docker login -u \"$USERNAME\" --password-stdin"
    }
}

// Function to build and push Docker images
def buildAndPushDockerImage(dockerfile, imageName) {
    sh """
        docker build -t \"$imageName\" -f $dockerfile .
        docker tag \"$imageName\" etcsys/\"$imageName\"
        docker push etcsys/\"$imageName\"
    """
}

// Function to run Snyk scan
def snykScan(imageName, dockerfile) {
    withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
        withEnv(["SNYK_TOKEN=${SNYK_TOKEN}"]) {
            sh "snyk auth $SNYK_TOKEN && snyk container test etcsys/$imageName --file=$dockerfile --policy-path=.snyk"
        }
    }
}

// Function to deploy Docker containers using docker-compose
def deployContainers() {
    def dockerComposeContent = """
        version: '3.8'

        services:
          python_app:
            image: etcsys/$PYTHON_IMG_NAME
            ports:
              - "8000:8000"

          nginx:
            image: etcsys/$NGINX_IMG_NAME
            ports:
              - "8445:8444"
    """
    writeFile file: 'docker-compose.yaml', text: dockerComposeContent
    sh 'docker-compose down'
    sh 'docker-compose up -d'
}

// Function to perform cleanup
def cleanup() {
    echo 'Starting cleanup process...'
    
    // Remove Docker images
    removeDockerImage(PYTHON_IMG_NAME)
    removeDockerImage(NGINX_IMG_NAME)
    
    // Clean workspace
    cleanWs()
    
    echo 'Cleanup process completed.'
}

// Function to remove Docker image
def removeDockerImage(imageName) {
    try {
        sh "docker rmi etcsys/$imageName || echo \"Image etcsys/$imageName already removed or not found.\""
    } catch (Exception e) {
        echo "Error during Docker image removal: ${e.getMessage()}"
    }
}
