pipeline {
    agent any

    environment {
        PYTHON_IMG_NAME = "python-app:${BUILD_NUMBER}"
        NGINX_IMG_NAME = "nginx-static:${BUILD_NUMBER}"
        SNYK_TOKEN = credentials('snyk-token')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    // Docker login
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                        sh """
                            echo \$USERPASS | docker login -u \$USERNAME --password-stdin
                        """
                    }

                    // Build and push Python app image
                    sh """
                        docker build -t "${env.PYTHON_IMG_NAME}" -f Dockerfile.python .
                        docker tag "${env.PYTHON_IMG_NAME}" etcsys/"${env.PYTHON_IMG_NAME}"
                        docker push etcsys/"${env.PYTHON_IMG_NAME}"
                    """

                    // Build and push Nginx image
                    sh """
                        docker build -t "${env.NGINX_IMG_NAME}" -f Dockerfile.nginx .
                        docker tag "${env.NGINX_IMG_NAME}" etcsys/"${env.NGINX_IMG_NAME}"
                        docker push etcsys/"${env.NGINX_IMG_NAME}"
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Install dependencies
                    sh """
                        docker run --rm -v \$PWD:/app -w /app etcsys/${env.PYTHON_IMG_NAME} pip install -r requirements.txt
                    """
                }
            }
        }

        stage('Linting') {
            steps {
                script {
                    // Run linting
                    sh """
                        docker run --rm -v \$PWD:/app -w /app etcsys/${env.PYTHON_IMG_NAME} flake8 .
                    """
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    // Run unit tests
                    sh """
                        docker run --rm -v \$PWD:/app -w /app etcsys/${env.PYTHON_IMG_NAME} pytest tests
                    """
                }
            }
        }

        stage('Snyk Security Scans') {
            steps {
                script {
                    // Run Snyk scans
                    sh """
                        docker run --rm -v \$PWD:/app -w /app snyk/snyk:docker test --file=Dockerfile.python --docker etcsys/${env.PYTHON_IMG_NAME} --org=my-org --project-name=${env.PYTHON_IMG_NAME} --json-file-output=snyk_report.json --sarif-file-output=snyk_report.sarif --fail-on=all
                    """
                }
            }
        }

        stage('Deploy Containers') {
            steps {
                script {
                    // Deploy containers using Docker Compose
                    sh """
                        docker-compose up -d
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                // Cleanup steps go here
                echo 'Starting cleanup process...'

                // Remove Python app image
                sh "docker rmi etcsys/${env.PYTHON_IMG_NAME} || echo 'Image etcsys/${env.PYTHON_IMG_NAME} already removed or not found.'"

                // Remove Nginx image
                sh "docker rmi etcsys/${env.NGINX_IMG_NAME} || echo 'Image etcsys/${env.NGINX_IMG_NAME} already removed or not found.'"

                // Clean the workspace
                cleanWs()

                echo 'Cleanup process completed.'
            }
        }
    }
}
